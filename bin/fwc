#!/usr/bin/python

import os
import sys
import re
import optparse
import logging
import time

from Cheetah.Template import Template

from fwc.firewall import Firewall, SyntaxError

def parse_args():
    p = optparse.OptionParser()
    p.add_option('-d', '--rules-dir',
        default='/etc/firewall/rules.d')
    p.add_option('-t', '--master-template',
        default='/etc/firewall/master.tmpl')
    p.add_option('-o', '--output')
    p.add_option('-x', '--exclude',
        action='append', default=[])
    p.add_option('-D', '--dump',
            action='store_true')
    p.add_option('--debug',
            action='store_true')

    return p.parse_args()

def debug_dump(fw):
    import pprint
    pprint.pprint(fw.rules)
    pprint.pprint(fw.chains)

def generate_output (fw, opts):
    tmpl = Template(
            file=opts.master_template,
            namespaces={
                'rules': fw.rules,
                'producer': 'firewall-compiler',
                'date': time.strftime('%Y-%m-%d %H:%H:%S',
                    time.localtime()),
                })

    if opts.output:
        sys.stdout = open(opts.output, 'w')

    print tmpl

def read_rules (fw, opts):
    global log

    try:
        for rfile in sorted(os.listdir(opts.rules_dir)):
            # ignore dotfiles.
            if rfile.startswith('.'):
                continue

            # only read *.rules files.
            if not rfile.endswith('.rules'):
                continue

            # handle explicit exclusions via -x command line option.
            if os.path.splitext(rfile)[0] in opts.exclude:
                log.info('excluding %s' % rfile)
                continue

            log.info('Reading %s' % rfile)
            fw.update(os.path.join(opts.rules_dir, rfile))
    except SyntaxError, detail:
        log.error(str(detail))
        sys.exit(1)

def configure_logging(opts):
    global log

    if opts.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(
            level=level,
            datefmt='%Y-%m-%d %H:%M:%S',
            format='%(asctime)s %(name)s [%(levelname)s]: %(message)s')

    log = logging.getLogger('fwc')

def main():
    global log

    opts, args = parse_args()
    configure_logging(opts)
    fw = Firewall()

    log.info('Start reading rules.')
    read_rules(fw, opts)
    log.info('Finished reading rules.')

    if opts.dump:
        log.info('Generating debug dump.')
        debug_dump(fw)
    else:
        log.info('Generating output.')
        generate_output(fw, opts)

if __name__ == '__main__':
    main()

# vim: set ai ts=4 sw=4 expandtab :

