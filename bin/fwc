#!/usr/bin/python

import os
import sys
import re
import optparse
import logging

from Cheetah.Template import Template

from fwc.firewall import Firewall

def parse_args():
    p = optparse.OptionParser()
    p.add_option('-d', '--rules-dir',
        default='/etc/firewall/rules.d')
    p.add_option('-t', '--master-template',
        default='/etc/firewall/master.tmpl')
    p.add_option('-o', '--output')
    p.add_option('-x', '--exclude',
        action='append', default=[])
    p.add_option('-D', '--dump',
            action='store_true')

    return p.parse_args()

def main():
    logging.basicConfig(
            level=logging.INFO,
            datefmt='%Y-%m-%d %H:%M:%S',
            format='%(asctime)s %(name)s [%(levelname)s]: %(message)s')
    log = logging.getLogger('fwc')
    opts, args = parse_args()
    fw = Firewall()

    for rfile in sorted(os.listdir(opts.rules_dir)):
        # ignore dotfiles.
        if rfile.startswith('.'):
            continue

        # only read *.rules files.
        if not rfile.endswith('.rules'):
            continue

        # handle explicit exclusions via -x command line option.
        if os.path.splitext(rfile)[0] in opts.exclude:
            log.info('excluding %s' % rfile)
            continue

        fw.update(os.path.join(opts.rules_dir, rfile))

    if opts.dump:
        import pprint
        pprint.pprint(fw.rules)
        pprint.pprint(fw.chains)
    else:
        tmpl = Template(file=opts.master_template, namespaces={'rules': fw.rules})

        if opts.output:
            sys.stdout = open(opts.output, 'w')

        print tmpl

if __name__ == '__main__':
    main()

# vim: set ai ts=4 sw=4 expandtab :

